logging {
    level = "info"
    format = "logfmt"
    write_to = [
      loki.write.another.receiver,
      loki.write.grafana_cloud.receiver,
    ]
}
prometheus.remote_write "another" {
  endpoint {
    url = "https://another.com/prom/push"
    bearer_token = "secret"
    tls_config {
      insecure_skip_verify = true
    }
  }
  external_labels = {
  }
}
prometheus.remote_write "grafana_cloud" {
  endpoint {
    url = "https://prometheus-prod-36-prod-us-west-0.grafana.net/api/prom/push"
    basic_auth {
      username = "username"
      password = "password"
    }
    tls_config {
      insecure_skip_verify = false
    }
  }
  external_labels = {
    a = "b",
  }
}
prometheus.remote_write "grafana_cloud_interval" {
  endpoint {
    url = "https://prometheus-prod-36-prod-us-west-0.grafana.net/api/prom/push"
    basic_auth {
      username = "username"
      password = "password"
    }
    tls_config {
      insecure_skip_verify = false
    }
    metadata_config {
      send_interval = "42s"
    }
  }
  external_labels = {
    a = "b",
  }
}
loki.write "another" {
  endpoint {
    url = "https://another.com/loki/push"
    bearer_token = "secret"
    tls_config {
      insecure_skip_verify = true
    }
  }
  external_labels = {
  }
}
loki.write "grafana_cloud" {
  endpoint {
    url = "https://logs-prod-021.grafana.net/loki/api/v1/push"
    basic_auth {
      username = "username"
      password = "password"
    }
    tls_config {
      insecure_skip_verify = false
    }
  }
  external_labels = {
    a = "b",
  }
}
prometheus.scrape "test_address" {
  scrape_interval = "42s"
  targets = [{ __address__ = "localhost:12345", }]
  forward_to = [
    prometheus.relabel.test_address,
  ]
}
prometheus.relabel "test_address" {
  forward_to = [
    prometheus.remote_write.another.receiver,
    prometheus.remote_write.grafana_cloud.receiver,
    prometheus.remote_write.grafana_cloud_interval.receiver,
  ]
}
prometheus.scrape "test_relabel" {
  scrape_interval = "42s"
  targets = [{ __address__ = "localhost:12345", }]
  forward_to = [
    prometheus.relabel.test_relabel,
  ]
}
prometheus.relabel "test_relabel" {
  forward_to = [
    prometheus.remote_write.another.receiver,
    prometheus.remote_write.grafana_cloud.receiver,
    prometheus.remote_write.grafana_cloud_interval.receiver,
  ]
  rule {
    source_labels = [
      "l1",
      "l2",
    ]
    separator = ";"
    target_label = "t1"
    replacement = "$1"
    regex = "r2"
    action = "drop"
  }
  rule {
    source_labels = [
      "l1",
    ]
    action = "drop"
  }
}
prometheus.exporter.self "alloy" {}
prometheus.scrape "test_self" {
  scrape_interval = "43s"
  targets = prometheus.exporter.self.alloy.targets
  forward_to = [
    prometheus.relabel.test_self,
  ]
}
prometheus.relabel "test_self" {
  forward_to = [
    prometheus.remote_write.another.receiver,
    prometheus.remote_write.grafana_cloud.receiver,
    prometheus.remote_write.grafana_cloud_interval.receiver,
  ]
}
prometheus.exporter.unix "host" {
  set_collectors = [
    "asd",
  ]
}
prometheus.scrape "test_unix" {
  scrape_interval = "44s"
  targets = prometheus.exporter.unix.host.targets
  forward_to = [
    prometheus.relabel.test_unix,
  ]
}
prometheus.relabel "test_unix" {
  forward_to = [
    prometheus.remote_write.another.receiver,
    prometheus.remote_write.grafana_cloud.receiver,
    prometheus.remote_write.grafana_cloud_interval.receiver,
  ]
}
local.file_match "syslog" {
  path_targets = [
    {
      __path__ = "/var/log/syslog",
    },
  ]
}
loki.source.file "syslog" {
  targets    = local.file_match.syslog.targets
  forward_to = [
    loki.process.syslog.receiver,
  ]
}
loki.process "syslog" {
  stage.static_labels {
    values = {
      name = "syslog",
    }
  }
  forward_to = [
    loki.write.another.receiver,
    loki.write.grafana_cloud.receiver,
  ]
}
local.file_match "varlog" {
  path_targets = [
    {
      __path__ = "/var/log/*.log",
      __path_exclude = "/var/log/agent.log",
    },
  ]
}
loki.source.file "varlog" {
  targets    = local.file_match.varlog.targets
  forward_to = [
    loki.process.varlog.receiver,
  ]
}
loki.process "varlog" {
  stage.static_labels {
    values = {
      name = "varlog",
    }
  }
  forward_to = [
    loki.write.another.receiver,
    loki.write.grafana_cloud.receiver,
  ]
}
discovery.kubernetes "pod" {
  role = "pod"
}
discovery.relabel "pod_logs" {
  targets = discovery.kubernetes.pod.targets
  rule {
    source_labels = ["__meta_kubernetes_namespace"]
    action = "replace"
    target_label = "namespace"
  }
  rule {
    source_labels = ["__meta_kubernetes_pod_name"]
    action = "replace"
    target_label = "pod"
  }
  rule {
    source_labels = ["__meta_kubernetes_pod_container_name"]
    action = "replace"
    target_label = "container"
  }
  rule {
    source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
    action = "replace"
    target_label = "app"
  }
  rule {
    source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
    action = "replace"
    target_label = "job"
    separator = "/"
    replacement = "$1"
  }
  rule {
    source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
    action = "replace"
    target_label = "__path__"
    separator = "/"
    replacement = "/var/log/pods/*$1/*.log"
  }
}
loki.source.kubernetes "pod_logs" {
  targets    = discovery.relabel.pod_logs.output
  forward_to = [
    loki.write.another.receiver,
    loki.write.grafana_cloud.receiver,
  ]
}
loki.source.kubernetes_events "cluster_events" {
  job_name   = "integrations/kubernetes/eventhandler"
  log_format = "logfmt"
  forward_to = [
    loki.write.another.receiver,
    loki.write.grafana_cloud.receiver,
  ]
}
